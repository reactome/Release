#!/usr/local/bin/perl -w 

# This CGI script understands the command line
# argument ST_ID, which is of the form: StableId.Version,
# e.g. "16.1".  It takes this argument and creates a
# "control panel" showing the history etc. for this
# stable ID.

use strict;
use CGI qw(:standard);
use common::sense;

use lib "/usr/local/gkb/modules";
use GKB::DBAdaptor;
use GKB::WebUtils;
use GKB::Utils;
use GKB::Config;
use GKB::StableIdentifierDatabase;
use HTTP::Tiny;
use JSON;
use GKB::FrontPage3;
use Data::Dumper;

use constant BY_ID    => '/ReactomeRESTfulAPI/RESTfulWS/queryById/DatabaseObject';

my $host = url(-base => 1);
my $script_name = $0;

my $front_page = GKB::FrontPage3->new("$PROJECT_NAME (Stable ID)", "/stylesheet.css");
my $header = $front_page->get_header();
my $footer = $front_page->get_footer();
my $enclosing_div_start = $front_page->get_enclosing_div_start();
my $enclosing_div_end = $front_page->get_enclosing_div_end();
my $warning;

my $CGI = CGI->new();
my $stable = GKB::StableIdentifierDatabase->new();

my $dba = $stable->get_dba();
my $instance_db_id;
if ($CGI->param("ST_ID")) {
    my $extended_st_id = $CGI->param("ST_ID");
    if ( !$extended_st_id ) {
	handle_error("ST_ID missing!!\n");
    }

    my ($identifier, $version) = $extended_st_id =~ /^(\S+)\.(\d+)$/;
    unless ($identifier) {
	($identifier = $extended_st_id) =~ s/\.\d+$//;
    }

    if (!$identifier) {
	handle_error("I could not figure out which stable ID you mean ($extended_st_id), I'm sorry, I give up");
    }

    my $instance_db_ids = $stable->db_ids_from_stable_id($identifier);
    if (@$instance_db_ids == 0) {
	handle_error("I could not find a record for $identifier");
    }
    elsif (@$instance_db_ids > 1) {
	handle_multiple_assignment_error($instance_db_ids);
    }
    else {
	$instance_db_id = $instance_db_ids->[0];
    }
}
else {
    $instance_db_id = $CGI->param("DB_ID") || $CGI->param("ID") || handle_error("I could not find a database identifier or stable ID");
}



my $instance = eval{$dba->fetch_instance_by_db_id($instance_db_id)->[0]};
unless ($instance) {
    handle_error("Could not find a database entry for DB_ID $instance_db_id"); 
}
my $display_name = $instance->displayName;
my $class = $instance->class;

my @events = $stable->get_history($instance_db_id);


print_page_start();
say h1("External identifier history for $class '$display_name'");
my %event;
my $used_name;
my $highest_release = 0;
for my $event (@events) {
    my ($st_id, $event, $release, $database) = @$event;
    $highest_release = $release if $release > $highest_release;

    $event = '' if $event eq 'exists';
    push @{$event{$release}}, [$st_id, $event];
}

my @keys = sort {$a <=> $b} keys %event;
my @rows = (th(['Release','Identifier','Change']));
for my $release (@keys) {
    for my $evt (@{$event{$release}}) {
	if ($release == $highest_release) {	
	    $evt->[0] = a(
	    {
		-href => '/PathwayBrowser/#'.$evt->[0],
		-target => '_BLANK'
	    },
	    $evt->[0]
	    );
	}
	push @rows, td([$release,@$evt]);
    }
}

say table(
    {-style=>"width:100%"},
    TR(\@rows)
    );


print_page_end();



sub handle_message {
    my $message = shift;
    print_page_start();
    print h1($message);
    print_page_end();
    exit 0;
}

sub handle_error {
	my ($error_message) = @_;
	
	# Print to web page
	print_page_start();
	print handle_warning($error_message);
	print_page_end();

	# Print to log file
	print STDERR "$error_message\n";

	exit;
}

sub handle_warning {
    my $message = shift;
    my $error   = shift;
    my $class = $error ? "Error" : "Warning";
    if ($message) {
	$warning .= qq(<br><p style="font-size:large;color:red">$class: $message</p>);
    }
    return $warning;
}

sub print_page_end {
    print $enclosing_div_end, $footer;
    print $CGI->end_html;
}

sub print_page_start {
    my ($title) = @_;
    
    if (!(defined $title)) {
	$title = "$PROJECT_NAME ($script_name)";
    }
    
    print $CGI->header(-charset => 'UTF-8');
    print $header, $enclosing_div_start;
}

# get the real current stable ID from the main database
sub get_current_stable_id {
    my $id = shift;
    my $json = REST_query($id);
    my $stable_id = $json->{stableIdentifier} 
      or warn "get_current_stable_id: No stable identifier found!\n";
    my $display_name = $stable_id->{displayName} 
      or warn "get_current_stable_id: No stable identifier dsiplayName found!\n";
    return $display_name;
}


sub get_current_stable_version {
    my $id = shift;
    my $json = REST_query($id);
    my $stable_id = $json->{stableIdentifier}
    or warn "get_current_stable_id: No stable identifier found!\n";
    my $display_name = $stable_id->{displayName}
    or warn "get_current_stable_id: No stable identifier dsiplayName found!\n";
    my ($version) = $display_name =~ /\.(\d+)$/;
    return $version;
}

sub handle_multiple_assignment_error {
    my $ids = shift;
    print_page_start();
    print handle_warning("This identifier is associated with more than one database object");
    for my $id (@$ids) {
	my $instance = $dba->fetch_instance_by_db_id($id)->[0];
	my $name = $instance->displayName;
	my $class = $instance->class;
	my $species = attribute_name($instance,'species');
	$species = "($species)" if $species;
	my $text = "$name $species";
	print qq(<p><a href="/cgi-bin/control_panel_st_id?DB_ID=$id">$text</a></p>);
    }

    print_page_end();
}

sub attribute_name {
    my $instance = shift;
    my $attribute = shift;
    my $species = $instance->attribute_value($attribute)->[0];
    if ($species) {
	return $species->displayName;
    }
    return '';
}
