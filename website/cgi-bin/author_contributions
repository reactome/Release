#!/usr/local/bin/perl -w 
use strict;
use lib '/usr/local/gkb/modules';
use GKB::Config;
use GKB::DBAdaptor;
use GKB::WebUtils;
use GKB::FrontPage3;
use CGI qw(:standard);
use CGI::Carp 'fatalsToBrowser';
use HTTP::Tiny;
use JSON;
use Data::Dumper;
use Email::Valid;
use URI::Encode 'uri_encode';

use constant REVIEWED => '/ReactomeRESTfulAPI/RESTfulWS/queryReviewedPathways';
use constant AUTHORED => '/ReactomeRESTfulAPI/RESTfulWS/queryAuthoredPathways';
use constant BY_EMAIL => '/ReactomeRESTfulAPI/RESTfulWS/queryPeopleByEmail';
use constant BY_NAME  => '/ReactomeRESTfulAPI/RESTfulWS/queryPeopleByName';
use constant BY_ID    => '/ReactomeRESTfulAPI/RESTfulWS/queryById/DatabaseObject';


my $CGI = CGI->new();
my $front_page = GKB::FrontPage3->new("$PROJECT_NAME (author_contributions)", "/stylesheet.css");
my $header = $front_page->get_header();
my $footer = $front_page->get_footer();
my $enclosing_div_start = $front_page->get_enclosing_div_start();
my $enclosing_div_end = $front_page->get_enclosing_div_end();

my $host = url(-base => 1);
my $warning = '';

print header, $header, $enclosing_div_start;

print h1("Query author contributions in Reactome");

my $name   = $CGI->param("name")  || '';
my $email  = $CGI->param("email") || '';
my @db_id  = $CGI->param("DB_ID") || $CGI->param("ID");
my $clear_ids = $CGI->param('clear_ids');

my $DB = $CGI->param('DB') || 'gk_central';#$GK_DB_NAME;
$CGI->param('DB', $DB);

my $DBA = GKB::DBAdaptor->new
    (
     -dbname => $DB,
     -user   => $GK_DB_USER,
     -host   => $GK_DB_HOST,
     -pass   => $GK_DB_PASS,
     -port   => $GK_DB_PORT,
     -debug  => defined $CGI->param('DEBUG') ? $CGI->param('DEBUG') : undef
    );

my $wu = GKB::WebUtils->new(-DBA => $DBA,
                            -CGI => $CGI,
                            -DEBUG => defined $CGI->param('DEBUG') ? $CGI->param('DEBUG') : undef
    );


$CGI->param('FORMAT','instancebrowser');

if ($clear_ids) {
    @db_id = ();
}

print preamble(), start_input_form();

# Get user data
my $people_json = get_people_by_email($email) if $email;
$people_json  ||= get_people_by_name($name)   if $name;

my %people;
if ($people_json && @$people_json > 0) {
    my @people = get_person_data($people_json);

    if (@people == 1) {
        @db_id = $people[0]->[0];
    }
    
    if (@people > 0) {
	print person_table(@people);
    }
}

print end_form;

if (@db_id > 0) {
    for my $id (@db_id) {
	my $instances = $DBA->fetch_instance_by_db_id($id); 
	my @apaths = grep {defined $_ && ref $_} get_authored_pathways($id);
	my @rpaths = grep {defined $_ && ref $_} get_reviewed_pathways($id);
	my $nothing = @apaths + @rpaths == 0;

	my $person_name = $instances->[0] ? $instances->[0]->displayName . " ($id)" : '';

	if (@apaths > 0 ) {
	    print h1("Pathways authored by $person_name");
	    my @table = th([qw/DB_ID Name/]);
	    for my $pathway_wrapper (@apaths) {
		for my $pathway (@$pathway_wrapper) {
		    my $pid = $pathway->{dbId};
		    my $desc = $pathway->{displayName};
		    my $href = "${host}/cgi-bin/bibtex?DB_ID=$pid;personId=$id";
		    my $title = "Export bibtex record";
		    push @table, td([$pid, a({href => "$href", -title => "$title", -target => '_BLANK'}, $desc)]);
		}
	    }
	    print table({-style => 'width:100%'},TR(\@table));
	}
        if (@rpaths > 0 ) {
            print h1("Pathways reviewed by $person_name");
            my @table = th([qw/DB_ID Name/]);
            for my $pathway_wrapper (@rpaths) {
                for my $pathway (@$pathway_wrapper) {
                    my $pid = $pathway->{dbId};
                    my $desc = $pathway->{displayName};
                    my $href = "${host}/cgi-bin/bibtex?DB_ID=$pid;personId=$id";
                    my $title = "Export bibtex record";
                    push @table, td([$pid, a({href => "$href", -title => "$title", -target => '_BLANK'}, $desc)]);
                }
            }
            print table({-style => 'width:100%'},TR(\@table));
        }

	if ($nothing) {
	    warning("No pathways have been reviewed or authored by $person_name");
	}

	print $CGI->h1("Details on Person ", $instances->[0]->displayName);
        $wu->print_view($instances,0);

    }
}

print $warning, $enclosing_div_end, $footer;
exit 0;


sub person_table {
    my @people = @_;
    my @rows = (th([qw/Select DB_ID Name Project ORCID_ID/]));

    for my $person (@people) {
	if (@db_id > 0) {
	    print hidden('clear_ids', 1);
	    my $hits = grep {$person->[0] == $_} @db_id;
	    next unless $hits && $hits > 0;
	}
	
	my $checked  = grep {$_ == $person->[0]} @db_id;
	my $checkbox = $checked ? '' : checkbox({ -name    => 'DB_ID', 
						  -value   => $person->[0],
						  -label   => '',
						  -onclick => 'document.f1.submit()'
						});

	my $single = @db_id == 1;
	if ($single) {
	    $rows[0] = th([qw/DB_ID Name Project Other_IDS ORCID/]);
	}

	if ($name && !$single) {
		$person->[1] =~ s!($name)!<span style="color:red">$1</span>!gi;
	}

	unless ($single) {
	    push @rows, 
	    join("\n",
		 td({style => 'width:35px'}, $checkbox),
		 map {td($_)} @$person
		);
	}
	else {
	    my $button = orcid_button($person);
	    push @rows,     
	    join("\n",
		 map {td($_)} @$person, $button
		)
	}
    }
    return h3("Choose a person"),table({-style => 'width:100%;border:none'},TR(\@rows));
}

sub get_person_data {
    my $json = shift || [];
    my @people;
    
    for my $person (@$json) {

	my @person_data;
	$person_data[0] = $person->{dbId};
	$person_data[1] = $person->{displayName};
	$person_data[2] = $person->{project} || '';
	$person_data[3] = '';

	my @xrefs = grep {$_->{displayName} =~ /ORCID/} @{$person->{crossReference}};
	$person_data[3] = join(', ',map {$_->{displayName}} @xrefs) if @xrefs;
	
	$people{$person_data[0]} = $person_data[1];

	push @people, \@person_data;
    }
    
    return @people;
}

sub start_input_form {
return qq(
<form name="f1" method="POST">
<table width="100%">
<tr>
<td>Name <input name="name" size=20 value="$name" placeholder="Firstname Lastname"></td>
<td>Email address <input name="email" size=20 value="$email"></td>
<td><input type=submit ></td>
</tr>
</table>
)
}

sub contributions {
    "<div style='background:gainsboro;border:1px solid gray; text-align:center'>Placeholder text</div>"
}


sub warning {
    my $message = shift;
    $warning .= div({style => 'font-size:medium;color:red;text-align:center;margin-bottom:25px'}, "$message");
}

sub email_OK {
    my $email = shift;
    my $OK = Email::Valid->address($email);
    return $OK;
}

sub get_reviewed_pathways {
    my $person_id = shift;
    my $rest_url = $host . uri_encode(join('/',REVIEWED,$person_id));
    my $result = REST_query($rest_url);
    
    unless ($result) {
        warning("No data found for person $person_id");
    }

    $result = undef if @$result == 0;
    return $result;
}

sub get_authored_pathways {
    my $person_id = shift;
    my $rest_url = $host . uri_encode(join('/',AUTHORED,$person_id));
    my $result = REST_query($rest_url);

    unless ($result) {
	warning("No data found for person $person_id");
    }

    $result = undef if @$result == 0;
    return $result;
}

sub get_people_by_email {
    my $email = shift;

    unless (email_OK($email)) {
	warning("$email does not appear to be a valid email address");
	return undef;
    }

    my $rest_url = $host . uri_encode(join('/',BY_EMAIL,$email));
    my $result = REST_query($rest_url);
    unless ($result && $result->[0]) {
	warning("No person found for email $email");
    }
    
    return $result;
}

sub get_people_by_name {
    my $name = shift;

    my $rest_url = $host . uri_encode(join('/',BY_NAME,$name));
    my $result = REST_query($rest_url);
    unless ($result && $result->[0]) {
	warning("No person found for name $name");
    }

    return $result;
}

sub REST_query {
    my $url = shift;
    print STDERR "author_contributions: REST URL: $url\n";
    my $response = HTTP::Tiny->new->get($url, {'content-type' => 'application/json'});

    if ($response->{success}) {
	my $json = $response->{content};
	my $result = decode_json($json);
        return $result;
    }

    return undef;
}

sub orcid_button {
    my $person = shift;
    my $person_id = $person->[0];
    my $has_orcid = $person->[-1] && $person->[-1] =~ /ORCID/;
    my $button_text = $has_orcid ? "Sign on to ORCID" : "Create an ORCID ID";
    my $url = $has_orcid ? "https://orcid.org/signin" : "https://orcid.org/register"; 
    my $name = $person->[1] . " (DB_ID $person_id)";
    my $mail_url = 'mailto:help@reactome.org?subject=' . uri_encode("ORCID ID for Reactome user $name"); 
    my $button = <<"END";
<script  type="text/javascript">
    function openOrcid() {
        var win = window.open('$url', '_blank');
        win.focus();
    }
    function reportToUs() {
	window.location.href = '$mail_url';
    }
</script>
<button type="button" onclick="openOrcid()"  style="margin-top:-3px;cursor:pointer">
<img id="orcid-id-logo" src="http://orcid.org/sites/default/files/images/orcid_24x24.png"
width='18' height='18' alt="ORCID logo"/> $button_text</button>\&nbsp;
END
;

    unless ($has_orcid) {
	$button .= <<"END";
<button type="button" style="margin-top:-3px;cursor:pointer" onclick="reportToUs()">
<img id="nothing" src="/images/nothing.png" width='18' height='18' 
style="margin-right:-17px" alt="Nothing to see here, folks" /> Report ORCID ID to Reactome</button>
END
;
    }

    return $button;
}

sub preamble {
    my $ORCID = a({-href => 'http://orcid.org/'},'ORCID');
    my $rtn = p(<<END);
Reactome depends on collaboration between our curation team and outside experts to 
assemble and peer-review its pathway modules. The integration of $ORCID within Reactome 
enables us to meet a key challenge with authoring, curating and reviewing biological 
information by incentivizing and crediting the external experts that contribute their 
expertise and time to the Reactome curation process. More information is available at
$ORCID and <a href="http://www.reactome.org/pages/content/orcid-integration-project/">Reactome</a>. 

END
;

    $rtn .= p(<<END);
If you have an ORCID ID that is not listed on this page, please <a href="mailto:help\@reactome.org">
forward this information to us</a> and we will update your Reactome pathway records.
END
;

    return $rtn;
}
