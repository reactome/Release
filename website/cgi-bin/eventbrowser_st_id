#!/usr/local/bin/perl -w 
use strict;
use CGI qw(:standard);
use CGI::Carp 'fatalsToBrowser';
use HTTP::Tiny;
use Data::Dumper;
use JSON;


# This script does a quick RESTful API query to see if a 
# database ID can be mapped to the stable ID in the current release.
# If so, redirect to the eventbrowser (fast).  Otherwise, send the 
# stable ID to the (former) eventbrowser_st_id for a (slow)
# post-mortem.
# Sheldon McKay <sheldon.mckay@gmail.com>

use constant REST => 'http://reactomerelease.oicr.on.ca';

my $url = REST . '/ReactomeRESTfulAPI/RESTfulWS/queryById/DatabaseObject';
my $event_browser = '/cgi-bin/eventbrowser';

my $CGI = CGI->new();
my $st_id = my $full_st_id = $CGI->param('ST_ID') || die ('NO STABLE ID');
$st_id =~ s/\.\d+$//;
my $db_id;

# Query RESTful API to see if we can map the stable id to a DB_ID.

my $host = $CGI->url(-base => 1);
my $rest_url = "$url/$st_id";
my $response = HTTP::Tiny->new->get($rest_url, {'content-type' => 'application/json'});
if ($response->{success}) {
    my $result = decode_json($response->{content});
#    print header,pre(Dumper $result);
    $db_id = $result->{dbId};
#    print h1("DB ID is $db_id");
}


# We have an ID, send to event browser (fast)
if ($db_id) {
    my $url = "$event_browser?ID=$db_id";
    print $CGI->redirect($url);
}




# This stable ID is not in current DB, send to
# eventbrowser_st_id_deleted (slow)
else {
    my $url = "$event_browser\_st_id_deleted?ST_ID=$full_st_id";
    print $CGI->redirect($url);
}

exit 0;
