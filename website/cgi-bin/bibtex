#!/usr/local/bin/perl -w 

use strict;
use CGI qw(:standard);
use CGI::Carp 'fatalsToBrowser';
use HTTP::Tiny;
use Data::Dumper;
use JSON;

my $host = url(-base => 1);
my $REST = $host . '/ReactomeRESTfulAPI/RESTfulWS/queryById/DatabaseObject/';

my $id  = param('DB_ID');
my $pid = param('personId'); 


my %month = qw/
01 January
02 February
03 March
04 April
05 May
06 June
07 July
08 August
09 September
10 October
11 November
12 December
/;
# ensure that UTF-8 is set *here* because it won't get set anywhere else, and if you don't set it, you'll get weird characters in output.
print header(-type=>"text/plain",-charset=>'UTF-8');

if ($id && $pid) {
    $id =~ s/\.\d+$//;
    my $pathway = REST_query($id) || die "NO pathway data for $id";
    

    #print Dumper $pathway;
    my $stable_id = $pathway->{stableIdentifier}->{displayName} || 'NO STABLE ID';
    my $doi       = $pathway->{doi};
    my $title     = $pathway->{displayName}      || 'NO NAME';
    my @authors   = filter_authors($pathway->{authored},$pid);
    my @reviewers = filter_authors($pathway->{reviewed},$pid);

    my $xref      = "Reactome:$stable_id";
    if ($doi) {
	$xref .= ", DOI:$doi";
    }
    my $note      = 'Reactome Pathway Knowledgebase, http://www.reactome.org/';
    my $url       = "http://www.reactome.org/PathwayBrowser/#$stable_id";
    my $how_pub   = "\\url{http://www.reactome.org/PathwayBrowser/\#$stable_id\}";
    
    my $OK;
    if (@authors && has_event(@authors)) {
	print "Authored:\n";
	print bibtex($stable_id,$title,$xref,$how_pub,$note,$doi,@authors);
	$OK++;
    }

    if (@reviewers && has_event(@reviewers)) {
	print "Reviewed:\n";
	print bibtex($stable_id,$title,$xref,$how_pub,$note,$doi,@reviewers);
	$OK++;
    }

    unless ($OK) {
	print "No data found for Pathway $id, Person $pid\n";
    }
}
else {
    print "No DB_ID was provided\n";
}

sub filter_authors {
    my $authored = shift;
    my $pid      = shift;

    $authored && @$authored > 0 or return undef;
   
    my @events = map { get_object($_) } @$authored;

    my @rtn;

    for my $event (@events) {
	my @authors = grep {$_->{dbId} == $pid} @{$event->{author}};
	next unless @authors && @authors > 0;

	my $display_name = $event->{displayName};
	push @rtn, [$display_name =~ /^(.+), (\d+)-(\d+)-\d+/];
    }

    return @rtn;

}

sub get_object {
    my $thing = shift;
    return REST_query($thing->{dbId});
}

sub REST_query {
    my $id = shift;

    my $url = "$REST$id";

    my $response = HTTP::Tiny->new->get($url);

    if ($response->{success}) {
        return decode_json($response->{content});
    }

    return undef;
}

# gotta love Perl...
sub has_event {
    return scalar(grep {$_ && @$_} @_);
}

sub bibtex {
    my ($stable_id,$title,$xref,$how_pub,$note,$doi,@authors) = @_;
    for my $event (@authors) {
	$event && @$event || next;
	my ($authorstring, $year, $mon) = @$event;
	my $month = $month{$mon};
	
	my $bibtex = bibtex_template();
	$bibtex    =~ s/STABLE_ID/$stable_id/gm;
	$bibtex    =~ s/TITLE/$title/gm;
	$bibtex    =~ s/XREF/$xref/gm;
	$bibtex    =~ s/HOW_PUB/$how_pub/gm;
	$bibtex    =~ s/NOTE/$note/gm;
	$bibtex    =~ s/MONTH/$month/gm;
	$bibtex    =~ s/YEAR/$year/gm;
	$bibtex    =~ s/ATSTR/$authorstring/gm;
	$bibtex    =~ s/XREF/DOI:$doi/gm;
	
	print "$bibtex\n";
    }
}

sub bibtex_template {
'
<bibtex>
    @MISC{ STABLE_ID,
           author          = {ATSTR},
           title           = {TITLE},
           crossref        = {XREF},
           howpublished    = {HOW_PUB},
           note            = {NOTE},
           month           = {MONTH},
           year            = {YEAR},
           }
</bibtex>
';
}
